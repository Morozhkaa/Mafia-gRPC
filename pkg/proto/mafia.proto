syntax = "proto3";
package mafia;

option go_package = "github.com/Morozhkaa/grpc/pkg/proto";

service Mafia {
  rpc JoinGame (JoinGameRequest) returns (stream GameEvent);
  rpc GetGameStatus (GetGameStatusRequest) returns (GetGameStatusResponse);
  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
  rpc Kick (KickRequest) returns (KickResponse);
  rpc Kill (KillRequest) returns (KillResponse);
  rpc CheckUser (CheckUserRequest) returns (CheckUserResponse);
  rpc CheckTeam (CheckTeamRequest) returns (CheckTeamResponse);
}

enum Role {
  ROLE_UNKNOWN = 0;
  ROLE_INNOCENT = 1;
  ROLE_COMMISSAR = 2;
  ROLE_MAFIOSI = 3;
}
enum Team {
  TEAM_UNKNOWN = 0;
  TEAM_CIVILIANS = 1;
  TEAM_MAFIA = 2;
}

message Player {
  string username = 1;
  bool alive = 2;
  optional Role role = 3;
}

message VotePaper {
  Player voter = 1;
  optional Player candidate = 2;
}

message GetPlayersWithRolesRequest {}

message GetPlayersWithRolesResponse {
  repeated Player players = 1;
}

// JoinGame Method
message JoinGameRequest {
  string username = 1;
}

message GameEvent {
  Type type = 1;
  enum Type {
    EVENT_UNKNOWN = 0;
    EVENT_PLAYER_JOINED = 1;
    EVENT_PLAYER_LEFT = 2;
    EVENT_MESSAGE = 3;
    EVENT_GAME_STARTED = 4;
    EVENT_GAME_FINISHED = 5;
    EVENT_DAY_STARTED = 6;
    EVENT_NIGHT_STARTED = 7;
    EVENT_REPEAT_VOTE = 8;
  }
  
  message PayloadPlayerJoined {
    Player player = 1;
  }
  
  message PayloadPlayerLeft {
    Player player = 1;
  }
  
  message PayloadMessage {
    Player sender = 1;
    string content = 2;
  }
  
  message PayloadGameStarted {
    repeated Player players = 1;
    Role role = 2;
  }
  
  message PayloadGameFinished {
    Team winners = 1;
    repeated Player players = 2;
  }
  
  message PayloadDayStarted {
    uint64 day_id = 1;
    optional Player killed_player = 2; // who was killed that night
  }
  
  message PayloadNightStarted {
    uint64 day_id = 1;
    optional Player kicked_player = 2; // who was killed that day
    repeated VotePaper votes = 3;
  }

  message PayloadRepeatVote {
    uint64 day_id = 1;
    repeated VotePaper votes = 3;
  }

  oneof payload {
    PayloadPlayerJoined payload_player_joined = 5;
    PayloadPlayerLeft payload_player_left = 6;
    PayloadMessage payload_message = 7;
    PayloadGameStarted payload_game_started = 8;
    PayloadGameFinished payload_game_finished = 9;
    PayloadDayStarted payload_day_started = 10;
    PayloadNightStarted payload_night_started = 11;
    PayloadRepeatVote payload_repeat_vote = 12;
  }
}

// GetGameStatus Method
message GetGameStatusRequest {}

message GetGameStatusResponse {
  repeated Player players = 1;
  Player self = 2;
  optional Team winners = 3;
}


// SendMessage Method
message SendMessageRequest {
  string content = 1;
}
message SendMessageResponse {
  uint64 receiver_count = 1;
}


// Kick Method
message KickRequest {
  string username = 1;
}
message KickResponse {}


// Kill Method
message KillRequest {
  string username = 1;
}
message KillResponse {}

// CheckUser Method
message CheckUserRequest {
  string username = 1;
}
message CheckUserResponse {
  bool isMafia = 1;
}

// CheckTeam Method
message CheckTeamRequest {
  string username = 1;
}
message CheckTeamResponse {
  string username = 1;
  Team team = 2;
}